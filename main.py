# -*- coding: utf-8 -*-
"""CatsAndDogs

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PX4MOD6bBk4zD0-IBa4fKXsNBQxvmt7q

# Extracting Image
"""

# Import libs

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator

# Extracting ImageData for TRAIN data

imageTRAINgen = ImageDataGenerator(rescale=(1./255), horizontal_flip=True, shear_range=0.2, zoom_range=0.2)
training_set = imageTRAINgen.flow_from_directory('/content/drive/MyDrive/DataSets/Cat_and_Dog/train',
                                                 batch_size=32, target_size=(64, 64)
                                                 , class_mode='binary')

# Extracting ImageData for TEST data

imageTESTgen = ImageDataGenerator(rescale=(1./255), shear_range=0.2, horizontal_flip=True, zoom_range=0.2)
tesing_set = imageTESTgen.flow_from_directory('/content/drive/MyDrive/DataSets/Cat_and_Dog/test',
                                              target_size=(64, 64), batch_size=32
                                              , class_mode='binary')

"""# Building Model"""

# Building neural network blueprint

cnn = tf.keras.models.Sequential()

"""__First Layer__"""

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3])) # Convol feature layer
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))  # pooling layer

"""__Second Layer__"""

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))  # Convol feature layer
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))  # pooling layer

"""__Flattening Layer__"""

cnn.add(tf.keras.layers.Flatten())  # Input 1D layer

"""__Creating ANN (Fully Connection) Layer__"""

cnn.add(tf.keras.layers.Dense(128, activation='relu'))

"""__Output Layer__"""

cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

cnn.summary()

"""# Training the CNN"""

cnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])  # Improves model's performance

cnn.fit(x=training_set, validation_data=tesing_set, epochs=25)

"""# Prediction"""

import numpy as np
test_imagess = tf.keras.utils.load_img('/content/drive/MyDrive/DataSets/Cat_and_Dog/train/dogs/dog_109.jpg', target_size = (64, 64))
test_imagess

test_imagess = tf.keras.utils.img_to_array(test_imagess)
test_imagess

test_imagess.shape

test_imagess = np.expand_dims(test_imagess, axis=0)

test_images

result = cnn.predict(test_imagess)

if result[0][0] == 1:
  print('Dog')
elif result[0][0] == 0:
  print('Cat')

